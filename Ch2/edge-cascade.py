import cv2 as cv
img = cv.imread('pic/cb.jpg')      
cv.imshow('img', img)

canny = cv.Canny(img, 100,300)

cv.imshow('canny edges', canny)
cv.waitKey(0)

# 黑白線條風格
# 格式：cv.Canny(image, threshold1, threshold2)


#| 數值情況            | 結果特徵                                    
#| -----------------  | ---------------------------------------- |
#| 數值「高」               | 只偵測最明顯的邊緣。 線條少、清晰。 較多細節會被忽略 
#| 數值「低」               | 偵測更多細微變化。 線條多但雜亂。 容易偵測到雜訊  
#| 高低閾值「相同」          | 邊緣偵測會變得很死板，效果差或邊緣斷裂  
#| 高閾值是低閾值的2\~3倍    | 官方建議配置，效果穩定、自然。                       

#---------------------------------------------------------------------------------------
# 例1. cv.Canny(gray, 50, 150)
# 常用-->保留主要輪廓（鼻子、嘴巴、輪廓）+ 一些細節

# 例2. cv.Canny(gray, 10, 30)
# 太低 --> 偵測太多不必要的細節，像毛孔、陰影、雜訊也會出現

# 例3. cv.Canny(gray, 150, 200)
# 太高 --> 只保留最粗的線（可能只剩下臉輪廓）
#---------------------------------------------------------------------------------------

# 其他做法
# get rid of some edges and apply slight blur
# blur = cv.GaussianBlur(img, (9,9), cv.BORDER_DEFAULT)
# canny = cv.Canny(blur, 100,300)
#---------------------------------------------------------------------------------------

# dilat 線條變粗、補齊、去斷裂
# dilated = cv.dilate(canny, (9,9), iterations=3)
# cv.imshow('dilated', dilated)

# erode 把剛剛加粗的線稍微縮小、變細，達到修邊效果（像素更乾淨）
# eroded = cv.erode(dilated, (7,7), iterations= 5)
# cv.imshow('eroded', eroded)
#---------------------------------------------------------------------------------------


